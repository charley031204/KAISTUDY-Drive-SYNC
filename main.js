/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => TestMobileAuthPluginV2
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var OAUTH_CLIENT_ID_IOS = "234880468147-rjthdhoivaj88bspmsmr916tdp6pp519.apps.googleusercontent.com";
var AUTH_URL = "https://accounts.google.com/o/oauth2/v2/auth";
var SCOPES = ["https://www.googleapis.com/auth/drive"];
var TestMobileAuthPluginV2 = class extends import_obsidian.Plugin {
  async onload() {
    console.log("Mobile Auth Debugger Plugin V2 loaded.");
    this.settingTab = new TestMobileAuthSettingTabV2(this.app, this);
    this.addSettingTab(this.settingTab);
    const reversedClientId = OAUTH_CLIENT_ID_IOS.split(".").reverse().join(".");
    this.registerObsidianProtocolHandler(reversedClientId, (params) => {
      this.settingTab.logMessage("!!! SUCCESS !!!");
      this.settingTab.logMessage("Callback received from Google!");
      this.settingTab.logMessage("Params: " + JSON.stringify(params));
    });
  }
  async testMobileAuth(settingsTab) {
    settingsTab.logMessage("--- Test V2 Started ---");
    try {
      settingsTab.logMessage(`1. Platform.isMobile: ${import_obsidian.Platform.isMobile}`);
      const reversedClientId = OAUTH_CLIENT_ID_IOS.split(".").reverse().join(".");
      const redirectUri = `${reversedClientId}:/oauth2redirect`;
      settingsTab.logMessage(`2. Derived Redirect URI: ${redirectUri}`);
      const authUrl = new URL(AUTH_URL);
      authUrl.searchParams.set("scope", SCOPES.join(" "));
      authUrl.searchParams.set("response_type", "code");
      authUrl.searchParams.set("state", `test-state-${Date.now()}`);
      authUrl.searchParams.set("client_id", OAUTH_CLIENT_ID_IOS);
      authUrl.searchParams.set("redirect_uri", redirectUri);
      settingsTab.logMessage(`3. Removed PKCE params for this test.`);
      const urlString = authUrl.toString();
      settingsTab.logMessage(`4. Final URL (length: ${urlString.length}):`);
      settingsTab.logMessage(urlString);
      settingsTab.logMessage("5. Attempting to call open()...");
      try {
        open(urlString);
        settingsTab.logMessage("SUCCESS: open() was called without error.");
      } catch (e) {
        settingsTab.logMessage("!!! CRITICAL ERROR calling open() !!!");
        settingsTab.logMessage(e instanceof Error ? e.message : String(e));
      }
    } catch (e) {
      settingsTab.logMessage("!!! UNEXPECTED FATAL ERROR !!!");
      settingsTab.logMessage(e instanceof Error ? e.message : String(e));
    } finally {
      settingsTab.logMessage("--- Test V2 Finished ---");
    }
  }
};
var TestMobileAuthSettingTabV2 = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.logArea = null;
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Mobile Auth Debugger V2" });
    containerEl.createEl("p", { text: "This version uses the reversed client ID for the redirect URI." });
    new import_obsidian.Setting(containerEl).setName("Run Mobile Auth Test").addButton((button) => button.setButtonText("Run Test V2").setCta().onClick(() => {
      var _a;
      (_a = this.logArea) == null ? void 0 : _a.setText("Starting test...");
      this.plugin.testMobileAuth(this);
    }));
    containerEl.createEl("h3", { text: "Live Log Output" });
    this.logArea = containerEl.createEl("pre", { cls: "mobile-auth-debugger-log" });
    this.logArea.setAttr("style", "background-color: #222; padding: 10px; border-radius: 5px; white-space: pre-wrap; word-wrap: break-word; font-family: monospace; min-height: 50px;");
    this.logMessage("Ready to test.");
  }
  logMessage(message) {
    if (!this.logArea)
      return;
    const timestamp = (/* @__PURE__ */ new Date()).toLocaleTimeString();
    const newLogEntry = document.createElement("div");
    newLogEntry.setText(`[${timestamp}] ${message}`);
    this.logArea.appendChild(newLogEntry);
    this.logArea.scrollTop = this.logArea.scrollHeight;
  }
};
