/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => TestMobileAuthPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var OAUTH_CLIENT_ID_IOS = "234880468147-rjthdhoivaj88bspmsmr916tdp6pp519.apps.googleusercontent.com";
var MOBILE_REDIRECT_URI_SCHEME = "kaistudy-sync";
var AUTH_URL = "https://accounts.google.com/o/oauth2/v2/auth";
var SCOPES = ["https://www.googleapis.com/auth/drive"];
var TestMobileAuthPlugin = class extends import_obsidian.Plugin {
  async onload() {
    console.log("Mobile Auth Debugger Plugin loaded.");
    this.settingTab = new TestMobileAuthSettingTab(this.app, this);
    this.addSettingTab(this.settingTab);
  }
  /**
   * The core diagnostic function. It will log every step to the settings tab.
   * @param settingsTab - The instance of the settings tab to log messages to.
   */
  async testMobileAuth(settingsTab) {
    settingsTab.logMessage("--- Test Started ---");
    try {
      const isMobile = import_obsidian.Platform.isMobile;
      settingsTab.logMessage(`1. Platform.isMobile check: ${isMobile}`);
      if (!isMobile) {
        settingsTab.logMessage("WARNING: This test is intended for mobile platforms.");
      }
      const testState = `test-state-${Date.now()}`;
      settingsTab.logMessage(`2. Generated dummy state: ${testState}`);
      const authUrl = new URL(AUTH_URL);
      authUrl.searchParams.set("scope", SCOPES.join(" "));
      authUrl.searchParams.set("response_type", "code");
      authUrl.searchParams.set("state", testState);
      authUrl.searchParams.set("access_type", "offline");
      authUrl.searchParams.set("prompt", "consent");
      authUrl.searchParams.set("client_id", OAUTH_CLIENT_ID_IOS);
      authUrl.searchParams.set("redirect_uri", `obsidian://${MOBILE_REDIRECT_URI_SCHEME}`);
      const urlString = authUrl.toString();
      settingsTab.logMessage(`3. Constructed URL (length: ${urlString.length}):`);
      settingsTab.logMessage(urlString);
      settingsTab.logMessage("4. Attempting to call open()...");
      try {
        open(urlString);
        settingsTab.logMessage("SUCCESS: open() was called without throwing an immediate error.");
      } catch (e) {
        settingsTab.logMessage("!!! CRITICAL ERROR !!!");
        settingsTab.logMessage("The open() function failed with an error:");
        settingsTab.logMessage(e instanceof Error ? e.message : String(e));
        if (e instanceof Error && e.stack) {
          settingsTab.logMessage("Stack Trace:");
          settingsTab.logMessage(e.stack);
        }
      }
    } catch (e) {
      settingsTab.logMessage("!!! UNEXPECTED FATAL ERROR in test function !!!");
      settingsTab.logMessage(e instanceof Error ? e.message : String(e));
    } finally {
      settingsTab.logMessage("--- Test Finished ---");
    }
  }
};
var TestMobileAuthSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.logArea = null;
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Mobile Authentication Debugger" });
    containerEl.createEl("p", { text: "Click the button below to run the authentication test for iPad. Results will be shown in the log area." });
    new import_obsidian.Setting(containerEl).setName("Run Mobile Auth Test").setDesc("This will attempt to generate an auth URL and open the browser.").addButton((button) => button.setButtonText("Run Test").setCta().onClick(() => {
      if (this.logArea) {
        this.logArea.setText("");
      }
      this.plugin.testMobileAuth(this);
    }));
    containerEl.createEl("h3", { text: "Live Log Output" });
    this.logArea = containerEl.createEl("pre", {
      cls: "mobile-auth-debugger-log",
      text: "Logs will appear here..."
    });
    this.logArea.setAttr("style", "background-color: #222; padding: 10px; border-radius: 5px; white-space: pre-wrap; word-wrap: break-word; font-family: monospace;");
  }
  /**
   * Appends a message to our mini-console in the settings tab.
   * @param message - The string or error object to log.
   */
  logMessage(message) {
    if (!this.logArea)
      return;
    const timestamp = (/* @__PURE__ */ new Date()).toLocaleTimeString();
    const currentText = this.logArea.getText();
    const newText = currentText === "Logs will appear here..." ? `[${timestamp}] ${message}` : `${currentText}
[${timestamp}] ${message}`;
    this.logArea.setText(newText);
  }
};
